Spring Boot is an open source Java-based framework used to create a micro Service.
It is developed by Pivotal Team and is used to build stand-alone and production ready spring applications.

While the Spring framework focuses on providing flexibility to you, Spring Boot aims to shorten the code length and provide you with the easiest way to develop a web application. 
With annotation configuration and default codes, Spring Boot shortens the time involved in developing an application.


What is spring boot?
* Spring boot is a module of spring which makes easy to create stand-alone, product-grade spring based application that you can 'just-run'
* spring framework + embedded servers - manual configuration = spring boot
* features of Spring Boot:
  1) conventional over configuration software design style
      -> Decrease the effort of developer
  2) Opiniated default 
      -> automatic configuration
      -> scan the class path and find the dependency it will automatically configure the things
  3) it creates stand-alone spring application that can be started using java -jar
  4) embed tomcat no need to deploy WAR files
  5) no xml configuration and code generation
  many more..

----------------------------------------------JavaBrains SpringBoot Tutorial-----------------------------------------------------------------------------
what is spring?
* it is a application framework that provides template, framework for creating Enterprise applications

In pom.xml file org.springframework.boot is a parent package for a current project
	-> parent packages are defined in <parent></parent>
all the dependencies are defined inside 
	<dependencies>
		<dependency>...</dependency>
	</dependencies> 

build spring boot application:
1) goto start.spring.io 
2) add artifact, java version and necessary dependencies -- web dependency for creating restful services
3) download the package in zip file and extract in workspace
4) after opening file in sts we can directly run the application as it contains default configurations

@SpringBootApplication
public class CourseApiAppApplication {

	public static void main(String[] args) {
		SpringApplication.run(CourseApiAppApplication.class, args);
	}

}

@SpringBootApplication is annotation to represent the class as it is spring boot application which is start point of the application
@SpringBootApplication - enables Spring Boot autoconfiguration and component scanning.

what happens when spring boot application is started?
* it sets up default configuration 
* starts spring application context
* performs class path scan 
* starts tomcat server(built-in)

controller is created as it is a java class, contains annotations and has information about url's to trigger( mapping the requests) GET,PUT,POST,DELETE
@RestController annotation is added to represent the class as controller used for RESTful webservices

@RequestMapping
	-- it maps the HTTP requests 
	--maps to the GET method as default

@Autowired - marks a constructor, field, or setter method to be autowired by Spring dependency injection.

@PathVariable - maps the variable to the request mapping id.

@service - it is annotation which represents the class as service class which contains bussiness logic

@Bean - indicates that a method produces a bean to be managed by Spring.

What is dependency Injection?
The process of injecting dependent bean objects into target bean objects is called dependency injection.
* Setter Injection: The IOC container will inject the dependent bean object into the target bean object by calling the setter method.
* Constructor Injection: The IOC container will inject the dependent bean object into the target bean 
object by calling the target bean constructor.
* Field Injection: The IOC container will inject the dependent bean object into the target bean object by Reflection API.

IoC Inversion of Control-  Container is a framework for implementing automatic dependency injection. It manages object creation and its life-time and also 
injects dependencies into the class.

what is Swagger?
* develop APIs
* interact with APIs
* document APIs
creates automatic document of application
how to add swagger to spring boot?
* add swagger dependency in pom.xml
* add swagger enable annotation @EnableSwagger2
* configure swagger
* add details as annotations to apis

-----------------------------------------------------


 

